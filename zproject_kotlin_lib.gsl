#   JNA common functions
#
#   This is a code generator built using the iMatix GSL code generation
#   language. See https://github.com/zeromq/gsl for details.
#
#   Copyright (c) the Contributors as noted in the AUTHORS file.
#   This file is part of zproject.
#
#   This Source Code Form is subject to the terms of the Mozilla Public
#   License, v. 2.0. If a copy of the MPL was not distributed with this
#   file, You can obtain one at http://mozilla.org/MPL/2.0/.

function resolve_container (container)

    if my.container.name = "val"
        actual_name = "`$(my.container.name:camel)`"
    else
        actual_name = "$(my.container.name:camel)"
    endif

    #   Type of container shown to Java apps
    my.container.jni_java_type = ""
    #   Mapping from Java to JNI type
    my.container.jni_mapping = "$(actual_name:)"
    #   Is the container a known class type?
    my.container.jni_is_class = 0
    #   Is the container a self_p reference?
    my.container.jni_self_p = 0

    if my.container.type = "nothing"
        my.container.jni_java_type = "Unit"

    elsif my.container.type = "anything" \
    |     my.container.type = "sockish" \
    |     my.container.type = "size" \
    |     my.container.type = "time" \
    |     my.container.type = "msecs" \
    |     my.container.type = "file_size"
        my.container.jni_java_type = "Pointer"

    elsif my.container.type = "boolean"
        my.container.jni_java_type = "Boolean"

    elsif my.container.type = "byte"
        my.container.jni_java_type = "Byte"

    elsif my.container.type = "char"
        my.container.jni_java_type = "Char"

    elsif my.container.type = "integer"
        my.container.jni_java_type = "Int"

    elsif my.container.type = "number"
        if my.container.size ?= "1"
            my.container.jni_java_type = "Byte"
        elsif my.container.size = 2
            my.container.jni_java_type = "Short"
        elsif my.container.size = 4
            my.container.jni_java_type = "Int"
        elsif my.container.size = 8
            my.container.jni_java_type = "Long"
        endif

    elsif my.container.type = "real"
        if my.container.size ?= "4"
            my.container.jni_java_type = "Float"
        elsif my.container.size ?= "8"
            my.container.jni_java_type = "Double"
        endif

    elsif my.container.type = "buffer"
        if my.container.by_reference
            return 1        #   Skip methods that do this
        endif
        my.container.jni_java_type = "ByteArray"

    elsif my.container.type = "string"
        if my.container.by_reference
            return 1        #   Skip methods that do this
        endif
        my.container.jni_java_type = "String"

    elsif my.container.type = "format"
        my.container.jni_java_type = "String"

    elsif count (project.class, class.c_name = my.container.type & !defined (class.api))
        return 1        #   Refers to class that has no API model

    elsif my.container.name = "self_p"
        my.container.jni_self_p = 1

    elsif count (project.class, class.c_name = my.container.type) \
    |     count (project->dependencies.class, class.c_name = my.container.type)
        my.container.jni_java_type = "$(my.container.type:pascal)"
        my.container.jni_mapping = "$(actual_name:).self"
        my.container.jni_shim_type = "Pointer"
        my.container.jni_is_class = 1

    elsif my.container.callback ?= 1
        return 1        #   Don't implement callbacks yet

    elsif my.container.type = "va_list" \
    |     my.container.type = "FILE" \
    |     my.container.type = "zmq_pollitem" \
    |     my.container.type = "socket"
        return 1
    else
        abort "Unhandled type '$(my.container.type:)' in $(class.c_name)"
    endif

    #   By default, shim gets Java type
    my.container.jni_shim_type ?= my.container.jni_java_type

    return 0            #   Seems to be OK
endfunction

function resolve_method (method)
    my.method.okay = 1

    #   Escape reserved keywords in function names
    if my.method.name = "is" \
    | my.method.name = "clone" \
    |  my.method.name = "close" \
    |  my.method.name = "equals" \
    |  my.method.name = "finalize" \
    |  my.method.name = "getClass" \
    |  my.method.name = "hashCode" \
    |  my.method.name = "interface" \
    |  my.method.name = "toString" \
    |  my.method.name = "notify" \
    |  my.method.name = "notifyAll" \
    |  my.method.name = "wait"
        my.method.jni_name = "`$(name:camel)`"
    else
        my.method.jni_name = "$(name:camel)"
    endif

    my.method.jni_method_signature = ""
    if my.method.singleton = 1
        my.method.static = "static"
        my.method.jni_shim_signature_java = ""
        my.method.jni_shim_invocation_java = ""
        comma = ""
    else
        my.method.static = ""
        my.method.jni_shim_signature_java = "self: Pointer"
        my.method.jni_shim_invocation_java = "self"
        comma = ", "
    endif

    use_var_arg = 0
    for my.method.argument
        if variadic = 1
            use_var_arg = 1
        endif
    endfor

    for my.method.argument
        if argument.name = "val"
            actual_name = "`$(argument.name:camel)`"
        else
            actual_name = "$(argument.name:camel)"
        endif

        if resolve_container (argument) = 1
            my.method.okay = 0
            #echo "Skipping $(class.name).$(my.method.name) - can't deal with argument type $(argument.type)"
            last
        endif

        if jni_self_p = 1
            jni_shim_signature_java += "$(comma)self: Pointer"
            jni_shim_invocation_java += "$(comma)self"
            my.method.return_self_p = 1
            my.method->return.jni_shim_type = "Pointer"
        elsif variadic = 0
            if jni_method_signature <> ""
                jni_method_signature += ", "
            endif
            jni_shim_signature_java += "$(comma)"
            jni_shim_invocation_java += "$(comma)"
            if index () = count (my.method.argument) - 1 & use_var_arg = 1
                jni_method_signature += "vararg "
                argument.jni_shim_type = "Array<out $(argument.jni_shim_type:)>"
            endif
            jni_method_signature += "$(actual_name:): $(argument.jni_java_type:)"
            jni_shim_signature_java += "$(actual_name:): $(argument.jni_shim_type:)"
            jni_shim_invocation_java += "$(argument.jni_mapping:)"
        endif
        comma = ", "
    endfor

    for my.method.return
        if resolve_container (return)
            my.method.okay = 0
            #echo "Skipping $(class.name).$(my.method.name) - can't deal with return type $(return.type:)"
        else
            #   returned buffers need a size attribute
            if type = "buffer" & !defined (return.size)
                my.method.okay = 0
                #echo "Skipping $(class.name).$(my.method.name) - can't return unsized fresh buffer"
            elsif defined(my.method.return_self_p)
                jni_java_type = "Unit"
            endif
        endif
    endfor
endfunction

function resolve_class (class)
    my.class.static = 1
    if defined (my.class.api) & !my.class.private
        my.class.okay = 1
        for constructor
            my.class.static = 0
            resolve_method (constructor)
            if index () = 1 & constructor.okay = 0
                my.class.okay = 0
            endif
        endfor
        for destructor
            resolve_method (destructor)
        endfor
        for method
            resolve_method (method)
        endfor
    else
        my.class.okay = 0
    endif

    if my.class.name = "zpoller"
        my.class.okay = 0
    endif
endfunction
